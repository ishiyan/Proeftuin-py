import unittest
from datetime import datetime

from accounts.daycounting import DayCountConvention
from accounts.performances import Periodicity, Ratios

# good links
# https://www.kenwuyang.com/en/post/portfolio-optimization-with-python/
# backon 3rd ed excel
# https://bcs.wiley.com/he-bcs/Books?action=resource&bcsId=12534&itemId=1119831946&resourceId=49583


"""
Test input data from the 'Portfolio bacon' dataset
from the PerformanceAnalytics R package.

https://www.rdocumentation.org/packages/PerformanceAnalytics/versions/2.0.4/topics/portfolio_bacon

The data is taken from the page 65 (portfolio) and page 66 (benchmark)
of the:

Carl R Bacon
**Practical portfolio performance : measurement and attribution**
2nd ed, Wiley finance series, 2008
ISBN 978-0-470-05928-9

Hence the name 'bacon portfolio'.

if(!require('PerformanceAnalytics')) {
    install.packages('PerformanceAnalytics')
    library('PerformanceAnalytics')
}
data(portfolio_bacon)
head(portfolio_bacon, 100)
write.csv(portfolio_bacon)
"""
bacon_dates_previous = [
    datetime(2024,6,30), datetime(2024,7,1), datetime(2024,7,2), datetime(2024,7,3),
    datetime(2024,7,4), datetime(2024,7,5), datetime(2024,7,6), datetime(2024,7,7),
    datetime(2024,7,8), datetime(2024,7,9), datetime(2024,7,10), datetime(2024,7,11),
    datetime(2024,7,12), datetime(2024,7,13), datetime(2024,7,14), datetime(2024,7,15),
    datetime(2024,7,16), datetime(2024,7,17), datetime(2024,7,18), datetime(2024,7,19),
    datetime(2024,7,20), datetime(2024,7,21), datetime(2024,7,22), datetime(2024,7,23),
]
bacon_dates = [
    datetime(2024,7,1), datetime(2024,7,2), datetime(2024,7,3),datetime(2024,7,4),
    datetime(2024,7,5), datetime(2024,7,6), datetime(2024,7,7),datetime(2024,7,8),
    datetime(2024,7,9), datetime(2024,7,10), datetime(2024,7,11),datetime(2024,7,12),
    datetime(2024,7,13), datetime(2024,7,14), datetime(2024,7,15),datetime(2024,7,16),
    datetime(2024,7,17), datetime(2024,7,18), datetime(2024,7,19),datetime(2024,7,20),
    datetime(2024,7,21), datetime(2024,7,22), datetime(2024,7,23),datetime(2024,7,24),
]
bacon_portfolio_returns = [
    0.003, 0.026, 0.011,-0.010,
    0.015, 0.025, 0.016, 0.067,
    -0.014,0.040,-0.005, 0.081,
    0.040,-0.037,-0.061, 0.017,
    -0.049,-0.022,0.070, 0.058,
    -0.065,0.024,-0.005,-0.009,
]
bacon_benchmark_returns = [
    0.002, 0.025, 0.018,-0.011,
    0.014, 0.018, 0.014, 0.065,
    -0.015,0.042,-0.006, 0.083,
    0.039,-0.038,-0.062, 0.015,
    -0.048,0.021, 0.060, 0.056,
    -0.067,0.019,-0.003, 0.000,
]
bacon_portfolio_len = len(bacon_portfolio_returns)

"""
Extended Bacon 2023 (3rd edition) portfolio data

Bacon, Carl R.,
Practical portfolio performance measurement and attribution
Third edition. Hoboken NJ, Wiley, 2023
ISBN 9781119831945
"""
backon_2023_dates_previous = [
    datetime(2024,6,30), datetime(2024,7,1), datetime(2024,7,2), datetime(2024,7,3),
    datetime(2024,7,4), datetime(2024,7,5), datetime(2024,7,6), datetime(2024,7,7),
    datetime(2024,7,8), datetime(2024,7,9), datetime(2024,7,10), datetime(2024,7,11),
    datetime(2024,7,12), datetime(2024,7,13), datetime(2024,7,14), datetime(2024,7,15),
    datetime(2024,7,16), datetime(2024,7,17), datetime(2024,7,18), datetime(2024,7,19),
    datetime(2024,7,20), datetime(2024,7,21), datetime(2024,7,22), datetime(2024,7,23),
    datetime(2024,7,24), datetime(2024,7,25), datetime(2024,7,26), datetime(2024,7,27),
    datetime(2024,7,28), datetime(2024,7,29), datetime(2024,7,30), datetime(2024,7,31),
    datetime(2024,8,1), datetime(2024,8,2), datetime(2024,8,3), datetime(2024,8,4)]
backon_2023_dates = [
    datetime(2024,7,1), datetime(2024,7,2), datetime(2024,7,3),datetime(2024,7,4),
    datetime(2024,7,5), datetime(2024,7,6), datetime(2024,7,7),datetime(2024,7,8),
    datetime(2024,7,9), datetime(2024,7,10), datetime(2024,7,11),datetime(2024,7,12),
    datetime(2024,7,13), datetime(2024,7,14), datetime(2024,7,15),datetime(2024,7,16),
    datetime(2024,7,17), datetime(2024,7,18), datetime(2024,7,19),datetime(2024,7,20),
    datetime(2024,7,21), datetime(2024,7,22), datetime(2024,7,23),datetime(2024,7,24),
    datetime(2024,7,25), datetime(2024,7,26), datetime(2024,7,27),datetime(2024,7,28),
    datetime(2024,7,29), datetime(2024,7,30), datetime(2024,7,31),datetime(2024,8,1),
    datetime(2024,8,2), datetime(2024,8,3), datetime(2024,8,4),datetime(2024,8,5)]
backon_2023_portfolio_returns = [
    0.003, 0.026, 0.011, -0.009, 0.014, 0.024, 0.015, 0.066, -0.014, 0.039,
    -0.005, 0.081, 0.040, -0.037, -0.061, 0.014, -0.049, -0.021, 0.062, 0.058,
    -0.064, 0.017, -0.004, -0.002, -0.021, 0.011, 0.047, 0.024, 0.033, -0.007,
    0.047, 0.006, 0.010, -0.002, 0.034, 0.010]
backon_2023_drawdown_continuous = [
    0, 0, 0, -0.0090, 0, 0, 0, 0, -0.0140, 0,
    -0.0050, 0, 0, 0, -0.0960, 0, 0, -0.0690, 0, 0,
    -0.0640, 0, 0, 0, -0.0270, 0, 0, 0, 0, -0.0070,
    0, 0, 0, -0.0020, 0, 0]
backon_2023_drawdown_from_peak = [
    0, 0, 0, -0.0090, 0, 0, 0, 0, -0.0140, 0,
    -0.0050, 0, 0, -0.0370, -0.0957, -0.0831, -0.1280, -0.1463, -0.0934, -0.0408,
    -0.1022, -0.0869, -0.0906, -0.0924, -0.1115, -0.1017, -0.0595, -0.0369, -0.0051, -0.0121,
    0, 0, 0, -0.0020, 0, 0]

SQRT2 = 1.4142135623730950488016887242097

class TestKurtosis(unittest.TestCase):
    def setUp(self):
        """
        Verify this implementation with expected outputs
        from the PerformanceAnalytics R package:
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/kurtosis.R

        The data were produced by the following script in the online R interpreter:
        https://www.datacamp.com/datalab/w/28c21593-21e6-47d9-8e72-acebdd3be32c/edit

        ```R
        if(!require('PerformanceAnalytics')) {
            install.packages('PerformanceAnalytics')
            library('PerformanceAnalytics')
        }
        data(portfolio_bacon)
        # head(portfolio_bacon, 100)
        # write.csv(portfolio_bacon)
        
        for (method in c("excess", "moment", "fisher", "sample", "sample_excess")) {
	        print(paste("method: ", method))
            for (i in 1:portfolio_length) {
                result <- kurtosis(portfolio_bacon[1:i, ], method=method)
	            write.csv(result)
            }
        }
        ```
        """
        self.expected_kurtosis = {
            'excess': [
            None, -2.00000000000000000, -1.50000000000000000,
            -1.17592035552795000, -0.94669079980875600, -0.96028723389787100,
            -0.57793300076120100, 0.78641242115027200, 0.59954237086621500,
            -0.01187577489273160, 0.07517391430462480, -0.27406990671095100,
            -0.38022416153835900, -0.31560370425738600, -0.16235155227201600,
            0.02528905226985100, -0.33285099821964000, -0.37425348407483000,
            -0.58502674157514900, -0.69334606360953100, -0.77381631285861200,
            -0.68208349704651200, -0.61779722177118000,  -0.56754620589212500],
        }

    def test_conformance_to_R(self):
        ratios = Ratios(
            periodicity=Periodicity.DAILY,
            annual_risk_free_rate = 0.,
            annual_target_return = 0.,
            day_count_convention = DayCountConvention.RAW)
        ratios.reset()
        for i in range(bacon_portfolio_len):
            ratios.add_return(
                return_=bacon_portfolio_returns[i],
                return_benchmark=bacon_benchmark_returns[i],
                value=1.,
                time_start=bacon_dates_previous[i],
                time_end=bacon_dates[i])
            expected = self.expected_kurtosis['excess'][i]
            if expected is None:
                self.assertIsNone(ratios.kurtosis)
            else:
                self.assertAlmostEqual(ratios.kurtosis, expected, places=13)

class TestSharpeRatio(unittest.TestCase):
    def setUp(self):
        """
        Verify this implementation with expected outputs
        from the PerformanceAnalytics R package:
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/SharpeRatio.R

        The data were produced by the following script in the online R interpreter:
        https://www.datacamp.com/datalab/w/28c21593-21e6-47d9-8e72-acebdd3be32c/edit

        ```R
        if(!require('PerformanceAnalytics')) {
            install.packages('PerformanceAnalytics')
            library('PerformanceAnalytics')
        }
        data(portfolio_bacon)
        # head(portfolio_bacon, 100)
        # write.csv(portfolio_bacon)
        
        for (fun in c("StdDev", "VaR", "ES", "SemiSD")) {
            for(rf in seq(0, 0.3, by=0.05)) {
                for (i in 1:portfolio_length) {
                    result <- SharpeRatio(portfolio_bacon[1:i, ], Rf=rf, FUN=fun)
	                write.csv(result)
                }
            }
        }
        ```
        """
        self.expected_stddev = {
            0: [
            None, 0.8915694197569510, 1.1419253390798400,
            0.4977924836999790, 0.6680426571226850, 0.8511810078441020,
            0.9735918376312110, 0.8462916062735410, 0.6475912629068400,
            0.7524743687246650, 0.6702597534059590, 0.7244562693337180,
            0.7945207458232130, 0.5805910371128360, 0.3566360956461000,
            0.3758075293232440, 0.2578994439571370, 0.2131725662300710,
            0.2880753096781920, 0.3448210835211740, 0.2337747541463060,
            0.2546053055676570, 0.2430648040410730, 0.2275684556623890],
            0.05: [
            None, -2.1828078897497800, -3.1402946824695500,
            -2.8208240742998800, -3.0433054380033400, -2.7967375972020500,
            -2.9887005248213900, -1.3662354689514000, -1.4489272141296900,
            -1.3494093427967500, -1.4483773981646000, -0.9801467173338540,
            -0.9561181856516630, -0.9946559628057110, -1.0011155375243300,
            -1.0290804307636500, -1.0706734491553900, -1.1284729554976500,
            -0.9967676208113950, -0.9275814386971810, -0.9577955946576800,
            -0.9630722427994000, -0.9992664166133000, -1.0367007424619900],
            0.10: [
            None, -5.257185199256510, -7.422514704018940,
            -6.139440632299740, -6.754653533129370, -6.444656202248210,
            -6.950992887274000, -3.578762544176350, -3.545445691166220,
            -3.451293054318160, -3.567014549735160, -2.684749704001430,
            -2.706757117126540, -2.569902962724260, -2.358867170694770,
            -2.433968390850540, -2.399246342267910, -2.470118477225370,
            -2.281610551300980, -2.199983960915530, -2.149365943461670,
            -2.180749791166460, -2.241597637267670, -2.300969940586380],
            0.15: [
            None, -8.331562508763240, -11.70473472556830,
            -9.458057190299600, -10.46600162825540, -10.09257480729440,
            -10.91328524972660, -5.791289619401290, -5.641964168202750,
            -5.553176765839570, -5.685651701305720, -4.389352690669000,
            -4.457396048601410, -4.145149962642810, -3.716618803865200,
            -3.838856350937430, -3.727819235380430, -3.811763998953090,
            -3.566453481790570, -3.472386483133890, -3.340936292265650,
            -3.398427339533520, -3.483928857922040, -3.565239138710760],
            0.20: [
            None, -11.40593981827000, -15.98695474711770,
            -12.77667374829950, -14.17734972338140, -13.74049341234050,
            -14.87557761217920, -8.003816694626240, -7.738482645239290,
            -7.655060477360980, -7.804288852876280, -6.093955677336570,
            -6.208034980076290, -5.720396962561350, -5.074370437035630,
            -5.243744311024330, -5.056392128492960, -5.153409520680800,
            -4.851296412280160, -4.744789005352240, -4.532506641069640,
            -4.616104887900570, -4.726260078576420, -4.829508336835140],
            0.25: [
            None, -14.48031712777670, -20.26917476866710,
            -16.09529030629930, -17.88869781850750, -17.38841201738670,
            -18.83786997463180, -10.21634376985120, -9.835001122275820,
            -9.756944188882380, -9.922926004446840, -7.798558664004140,
            -7.958673911551160, -7.295643962479900, -6.432122070206060,
            -6.648632271111220, -6.384965021605480, -6.495055042408520,
            -6.136139342769740, -6.017191527570600, -5.724076989873630,
            -5.833782436267630, -5.968591299230790, -6.093777534959520],
            0.30: [
            None, -17.55469443728340, -24.55139479021650,
            -19.41390686429920, -21.60004591363350, -21.03633062243280,
            -22.80016233708440, -12.42887084507610, -11.93151959931230,
            -11.85882790040380, -12.04156315601740, -9.503161650671720,
            -9.709312843026040, -8.870890962398450, -7.789873703376500,
            -8.053520231198110, -7.713537914718000, -7.836700564136240,
            -7.420982273259330, -7.289594049788950, -6.915647338677610,
            -7.051459984634690, -7.210922519885160, -7.358046733083910],
        }

    def test_conformance_to_R(self):
        for rf in self.expected_stddev.keys():
            ratios = Ratios(
                periodicity=Periodicity.DAILY,
                annual_risk_free_rate = (1 + rf) ** 252 - 1,
                annual_target_return = 0.,
                day_count_convention = DayCountConvention.RAW)
            ratios.reset()
            for i in range(bacon_portfolio_len):
                ratios.add_return(
                    return_=bacon_portfolio_returns[i],
                    return_benchmark=bacon_benchmark_returns[i],
                    value=1.,
                    time_start=bacon_dates_previous[i],
                    time_end=bacon_dates[i])
                expected = self.expected_stddev[rf][i]
                actual = ratios.sharpe_ratio()
                if expected is None:
                    self.assertIsNone(actual)
                else:
                    self.assertAlmostEqual(actual, expected, places=13)

    def test_conformance_to_R_ignore_risk_free_rate(self):
        for rf in self.expected_stddev.keys():
            ratios = Ratios(
                periodicity=Periodicity.DAILY,
                annual_risk_free_rate = (1 + rf) ** 252 - 1,
                annual_target_return = 0.,
                day_count_convention = DayCountConvention.RAW)
            ratios.reset()
            for i in range(bacon_portfolio_len):
                ratios.add_return(
                    return_=bacon_portfolio_returns[i],
                    return_benchmark=bacon_benchmark_returns[i],
                    value=1.,
                    time_start=bacon_dates_previous[i],
                    time_end=bacon_dates[i])
                expected = self.expected_stddev[0][i]
                actual = ratios.sharpe_ratio(ignore_risk_free_rate=True)
                if expected is None:
                    self.assertIsNone(actual)
                else:
                    self.assertAlmostEqual(actual, expected, places=13)

class TestSortinoRatio(unittest.TestCase):
    def setUp(self):
        """
        Verify this implementation with expected outputs
        from the PerformanceAnalytics R package:
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/SortinoRatio.R

        The data were produced by the following script in the online R interpreter:
        https://www.datacamp.com/datalab/w/28c21593-21e6-47d9-8e72-acebdd3be32c/edit

        ```R
        if(!require('PerformanceAnalytics')) {
            install.packages('PerformanceAnalytics')
            library('PerformanceAnalytics')
        }
        data(portfolio_bacon)
        # head(portfolio_bacon, 100)
        # write.csv(portfolio_bacon)

        for(mar in seq(0, 0.3, by=0.05)) {
            for (i in 1:portfolio_length) {
                result <- SortinoRatio(portfolio_bacon[1:i,], MAR=mar)
	            write.csv(result)
            }
        }
        ```
        """
        self.expected_mar = {
            0: [
            None, None, None,
            1.5, 2.01246117974981, 2.85773803324704,
            3.25049446787935, 5.40936687607709, 2.69307029756515,
            3.29008543386979, 2.92819766175444, 4.10863007844407,
            4.56665101160337, 1.67730613630736, 0.691483512929973,
            0.727302390567925, 0.452770753672167, 0.370054264368203,
            0.536498400203865, 0.665303673385798, 0.401733515514418,
            0.438224836666163, 0.418857174247308, 0.392372028795065],
            0.05: [
            -1, -0.951329033501053, -0.967821008377905,
            -0.955961761235827, -0.959422032420532, -0.950640505399932,
            -0.95521850710367, -0.835987494907806, -0.84620916319764,
            -0.825850705880606, -0.841892559996059, -0.739594446201381,
            -0.729168016460068, -0.735413445987151, -0.731283824494091,
            -0.739823509257131, -0.750430484501361, -0.766429130761335,
            -0.726278292165206, -0.700204514919608, -0.709303305303401,
            -0.71078905810419, -0.723223919287678, -0.735374254070636],
            0.10: [
            -1, -0.991075392350217, -0.994004065367307,
            -0.990197182430257, -0.991346575643354, -0.990116442284817,
            -0.991246179848335, -0.967496714088971, -0.966414074414246,
            -0.964235550350565, -0.966082469415414, -0.94189872360901,
            -0.942394085487388, -0.936339897881547, -0.925395562084343,
            -0.929178181525619, -0.927078590338157, -0.930569106181964,
            -0.919801251226696, -0.914287704738154, -0.910539461748751,
            -0.912598194566486, -0.916559222172636, -0.920182172840589],
            0.15: [
            -1, -0.996417809994967, -0.997575768378688,
            -0.995834118113659, -0.996368153925753, -0.995934350171384,
            -0.996420884320851, -0.987205311650959, -0.986323480223705,
            -0.98571934245646, -0.986228765445424, -0.977027342273118,
            -0.977549520922835, -0.974026907435946, -0.967837034830535,
            -0.969633325316602, -0.967764979639521, -0.969002413716694,
            -0.964718529650728, -0.962790232644317, -0.959887142777642,
            -0.961072265658698, -0.96278304333069, -0.964308752431633],
            0.20: [
            -1, -0.998083855734986, -0.998698336725323,
            -0.99771070205622, -0.99801584394805, -0.997800371538199,
            -0.998068849649492, -0.993239755037406, -0.992659872415312,
            -0.992408150460644, -0.992619565726621, -0.987881960219781,
            -0.98823525551411, -0.986106611940547, -0.982354752080372,
            -0.983376489446848, -0.982087062076609, -0.982679579387807,
            -0.980461205205724, -0.979546200128466, -0.9775965238121,
            -0.978327181255839, -0.979253332656348, -0.9800683478291],
            0.25: [
            -1, -0.998809832741189, -0.999189639137504,
            -0.998555585320735, -0.998752360319059, -0.998624779560618,
            -0.998794481866883, -0.995834502587331, -0.995436606390475,
            -0.995306262737866, -0.995415381650071, -0.992547929568571,
            -0.992792061389025, -0.99138965462731, -0.988907612046564,
            -0.989561576505392, -0.988652955593873, -0.988990632650487,
            -0.987652016692785, -0.987133492833107, -0.985775863829529,
            -0.986264456466303, -0.986839231561954, -0.987340829709707],
            0.30: [
            -1, -0.999189738186131, -0.999447456671317,
            -0.999006523001876, -0.99914376578682, -0.999059766028233,
            -0.999176600343191, -0.997179835082498, -0.996892594053081,
            -0.996815431774166, -0.99687985138134, -0.994963204068404,
            -0.995139781970162, -0.994151722453952, -0.992397243002826,
            -0.992850221571321, -0.992183390533543, -0.992398385744152,
            -0.991508067175892, -0.991179140762288, -0.990189587145122,
            -0.990537411720833, -0.990927200656132, -0.991265415151772],
        }

    def test_conformance_to_R(self):
        for mar in self.expected_mar.keys():
            # MAR means Minimal Accepted Rate
            mar_annual = (1 + mar) ** 252 - 1
            ratios = Ratios(
                periodicity=Periodicity.DAILY,
                annual_risk_free_rate = 0.,
                annual_target_return = mar_annual,
                day_count_convention = DayCountConvention.RAW)
            ratios.reset()
            for i in range(bacon_portfolio_len):
                ratios.add_return(
                    return_=bacon_portfolio_returns[i],
                    return_benchmark=bacon_benchmark_returns[i],
                    value=1.,
                    time_start=bacon_dates_previous[i],
                    time_end=bacon_dates[i])
                expected = self.expected_mar[mar][i]
                actual = ratios.sortino_ratio()
                if expected is None:
                    self.assertIsNone(actual)
                else:
                    self.assertAlmostEqual(actual, expected, places=13)

    def test_Jack_Schwager_version(self):
        for mar in self.expected_mar.keys():
            # MAR means Minimal Accepted Rate
            mar_annual = (1 + mar) ** 252 - 1
            ratios = Ratios(
                periodicity=Periodicity.DAILY,
                annual_risk_free_rate = 0.,
                annual_target_return = mar_annual,
                day_count_convention = DayCountConvention.RAW)
            ratios.reset()
            for i in range(bacon_portfolio_len):
                ratios.add_return(
                    return_=bacon_portfolio_returns[i],
                    return_benchmark=bacon_benchmark_returns[i],
                    value=1.,
                    time_start=bacon_dates_previous[i],
                    time_end=bacon_dates[i])
                expected = self.expected_mar[mar][i]
                actual = ratios.sortino_ratio(divide_by_sqrt2=True)
                if expected is None:
                    self.assertIsNone(actual)
                else:
                    expected /= SQRT2
                    self.assertAlmostEqual(actual, expected, places=13)

class TestOmegaRatio(unittest.TestCase):
    def setUp(self):
        """
        Verify this implementation with expected outputs
        from the PerformanceAnalytics R package:
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/Omega.R

        The data were produced by the following script in the online R interpreter:
        https://www.datacamp.com/datalab/w/28c21593-21e6-47d9-8e72-acebdd3be32c/edit

        ```R
        if(!require('PerformanceAnalytics')) {
            install.packages('PerformanceAnalytics')
            library('PerformanceAnalytics')
        }
        data(portfolio_bacon)
        # head(portfolio_bacon, 100)
        # write.csv(portfolio_bacon)

        for (l in seq(0.0, 0.1, by=0.02)) {
            for(rf in c(0)) { # results doesn't change when rf is changed
	            print(paste("L: ", l, "Risk-free rate: ", rf))
                for (i in 1:portfolio_length) {
                    result <- Omega(portfolio_bacon[1:i, ], L=l,
                        Rf=rf, method="simple", output="point")
	                write.csv(result)
                }
            }
        }
        ```
        """
        self.expected_loss_threshold = {
            0: [
            None, None, None,
            4.000000000000000, 5.500000000000000, 8.000000000000000,
            9.600000000000000, 16.300000000000000, 6.791666666666670,
            8.458333333333330, 7.000000000000000, 9.793103448275860,
            11.172413793103400, 4.909090909090910, 2.551181102362210,
            2.685039370078740, 1.937500000000000, 1.722222222222220,
            2.075757575757580, 2.368686868686870, 1.783269961977190,
            1.874524714828900, 1.839552238805970, 1.779783393501810],
            0.02: [
            0.00000000000000000, 0.35294117647058800, 0.23076923076923100,
            0.10714285714285700, 0.09836065573770490, 0.18032786885245900,
            0.16923076923076900, 0.89230769230769200, 0.58585858585858600,
            0.78787878787878800, 0.62903225806451600, 1.12096774193548000,
            1.28225806451613000, 0.87845303867403300, 0.60687022900763400,
            0.60000000000000000, 0.47604790419161700, 0.42287234042553200,
            0.55585106382978700, 0.65691489361702100, 0.53579175704989200,
            0.54446854663774400, 0.51646090534979400, 0.48737864077669900],
            0.04: [
            0.00000000000000000, 0.00000000000000000, 0.00000000000000000,
            0.00000000000000000, 0.00000000000000000, 0.00000000000000000,
            0.00000000000000000, 0.13917525773195900, 0.10887096774193500,
            0.10887096774193500, 0.09215017064846420, 0.23208191126279900,
            0.23208191126279900, 0.18378378378378400, 0.14437367303609300,
            0.13765182186234800, 0.11663807890223000, 0.10542635658914700,
            0.15193798449612400, 0.17984496124031000, 0.15466666666666700,
            0.15143603133159300, 0.14303329223181300, 0.13488372093023300],
            0.06: [
            0.00000000000000000, 0.00000000000000000, 0.00000000000000000,
            0.00000000000000000, 0.00000000000000000, 0.00000000000000000,
            0.00000000000000000, 0.02095808383233530, 0.01715686274509810,
            0.01635514018691590, 0.01419878296146050, 0.05679513184584180,
            0.05458089668615990, 0.04590163934426230, 0.03830369357045140,
            0.03617571059431530, 0.03171007927519820, 0.02901554404145080,
            0.03937823834196890, 0.03929679420889350, 0.03479853479853480,
            0.03368794326241140, 0.03185247275775360, 0.03011093502377180],
            0.08: [
            0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000,
            0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000,
            0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000,
            0.0000000000000000000, 0.0000000000000000000, 0.0014164305949008500,
            0.0013404825737265400, 0.0011587485515643100, 0.0009960159362549810,
            0.0009372071227741340, 0.0008361204013377930, 0.0007704160246533130,
            0.0007645259938837930, 0.0007518796992481210, 0.0006779661016949160,
            0.0006531678641410850, 0.0006188118811881190, 0.0005865102639296190],
            0.10: [
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
        }

    def test_conformance_to_R(self):
        for l in self.expected_loss_threshold.keys():
            l_annual = (1 + l) ** 252 - 1
            ratios = Ratios(
                periodicity=Periodicity.DAILY,
                annual_risk_free_rate = 0.,
                annual_target_return = l_annual,
                day_count_convention = DayCountConvention.RAW)
            ratios.reset()
            for i in range(bacon_portfolio_len):
                ratios.add_return(
                    return_=bacon_portfolio_returns[i],
                    return_benchmark=bacon_benchmark_returns[i],
                    value=1.,
                    time_start=bacon_dates_previous[i],
                    time_end=bacon_dates[i])
                expected = self.expected_loss_threshold[l][i]
                actual = ratios.omega_ratio()
                if expected is None:
                    self.assertIsNone(actual)
                else:
                    self.assertAlmostEqual(actual, expected, places=13)

class TestKappaRatio(unittest.TestCase):
    def setUp(self):
        """
        Verify this implementation with expected outputs
        from the PerformanceAnalytics R package:
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/Kappa.R

        The data were produced by the following script in the online R interpreter:
        https://www.datacamp.com/datalab/w/28c21593-21e6-47d9-8e72-acebdd3be32c/edit

        ```R
        if(!require('PerformanceAnalytics')) {
            install.packages('PerformanceAnalytics')
            library('PerformanceAnalytics')
        }
        data(portfolio_bacon)
        # head(portfolio_bacon, 100)
        # write.csv(portfolio_bacon)

        for (l in c(1,2,3,4)) {
            for(mar in seq(0, 0.3, by=0.05)) {
	            print(paste("L: ", l, "MAR: ", mar))
                for (i in 1:portfolio_length) {
                    result <- Kappa(portfolio_bacon[1:i, ],
                        MAR=mar, l=l)
	                write.csv(result)
                }
            }
        }
        ```
        """
        self.expected_order_mar = {
            1: {
                0: [
                None, None, None,
                3.0000000000000000, 4.5000000000000000, 7.0000000000000000,
                8.6000000000000000, 15.300000000000000, 5.7916666666666700,
                7.4583333333333300, 6.0000000000000000, 8.7931034482758600,
                10.172413793103400, 3.9090909090909100, 1.5511811023622000,
                1.6850393700787400, 0.9375000000000000, 0.7222222222222220,
                1.0757575757575800, 1.3686868686868700, 0.7832699619771860,
                0.8745247148288970, 0.8395522388059700, 0.7797833935018050],
                0.05: [
                -1.0000000000000000, -1.0000000000000000, -1.0000000000000000,
                -1.0000000000000000, -1.0000000000000000, -1.0000000000000000,
                -1.0000000000000000, -0.9356060606060610, -0.9481707317073170,
                -0.9497041420118340, -0.9567430025445290, -0.8778625954198470,
                -0.8808933002481390, -0.9020408163265300, -0.9201331114808650,
                -0.9242902208201890, -0.9345156889495230, -0.9403726708074530,
                -0.9155279503105590, -0.9055900621118010, -0.9173913043478260,
                -0.9196617336152220, -0.9240759240759240, -0.9283018867924530],
                0.1: [
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                0.15: [
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                0.2: [
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                0.25: [
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
                0.3: [
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
                -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
            },
            2: {
                0: [
                None, None, None,
                1.5000000000000000, 2.0124611797498100, 2.8577380332470400,
                3.2504944678793500, 5.4093668760770900, 2.6930702975651500,
                3.2900854338697900, 2.9281976617544400, 4.1086300784440700,
                4.5666510116033700, 1.6773061363073600, 0.6914835129299730,
                0.7273023905679250, 0.4527707536721670, 0.3700542643682030,
                0.5364984002038650, 0.6653036733857980, 0.4017335155144180,
                0.4382248366661630, 0.4188571742473080, 0.3923720287950650],
                0.05: [
                -1.0000000000000000, -0.9513290335010530, -0.9678210083779050,
                -0.9559617612358270, -0.9594220324205320, -0.9506405053999320,
                -0.9552185071036700, -0.8359874949078060, -0.8462091631976400,
                -0.8258507058806060, -0.8418925599960590, -0.7395944462013810,
                -0.7291680164600680, -0.7354134459871510, -0.7312838244940910,
                -0.7398235092571310, -0.7504304845013610, -0.7664291307613350,
                -0.7262782921652070, -0.7002045149196080, -0.7093033053034010,
                -0.7107890581041900, -0.7232239192876780, -0.7353742540706360],
                0.1: [
                -1.0000000000000000, -0.9910753923502170, -0.9940040653673070,
                -0.9901971824302570, -0.9913465756433540, -0.9901164422848170,
                -0.9912461798483350, -0.9674967140889710, -0.9664140744142460,
                -0.9642355503505650, -0.9660824694154140, -0.9418987236090100,
                -0.9423940854873880, -0.9363398978815470, -0.9253955620843430,
                -0.9291781815256190, -0.9270785903381570, -0.9305691061819640,
                -0.9198012512266960, -0.9142877047381540, -0.9105394617487520,
                -0.9125981945664860, -0.9165592221726360, -0.9201821728405880],
                0.15: [
                -1.0000000000000000, -0.9964178099949670, -0.9975757683786880,
                -0.9958341181136590, -0.9963681539257530, -0.9959343501713840,
                -0.9964208843208510, -0.9872053116509590, -0.9863234802237050,
                -0.9857193424564600, -0.9862287654454240, -0.9770273422731180,
                -0.9775495209228350, -0.9740269074359460, -0.9678370348305350,
                -0.9696333253166020, -0.9677649796395210, -0.9690024137166940,
                -0.9647185296507280, -0.9627902326443170, -0.9598871427776420,
                -0.9610722656586980, -0.9627830433306900, -0.9643087524316330],
                0.2: [
                -1.0000000000000000, -0.9980838557349860, -0.9986983367253230,
                -0.9977107020562200, -0.9980158439480500, -0.9978003715381990,
                -0.9980688496494920, -0.9932397550374060, -0.9926598724153120,
                -0.9924081504606440, -0.9926195657266210, -0.9878819602197810,
                -0.9882352555141110, -0.9861066119405470, -0.9823547520803720,
                -0.9833764894468480, -0.9820870620766090, -0.9826795793878070,
                -0.9804612052057240, -0.9795462001284660, -0.9775965238121000,
                -0.9783271812558380, -0.9792533326563480, -0.9800683478291000],
                0.25: [
                -1.0000000000000000, -0.9988098327411890, -0.9991896391375040,
                -0.9985555853207350, -0.9987523603190580, -0.9986247795606180,
                -0.9987944818668830, -0.9958345025873310, -0.9954366063904750,
                -0.9953062627378660, -0.9954153816500710, -0.9925479295685710,
                -0.9927920613890250, -0.9913896546273100, -0.9889076120465640,
                -0.9895615765053920, -0.9886529555938730, -0.9889906326504870,
                -0.9876520166927850, -0.9871334928331070, -0.9857758638295290,
                -0.9862644564663030, -0.9868392315619540, -0.9873408297097070],
                0.3: [
                -1.0000000000000000, -0.9991897381861310, -0.9994474566713170,
                -0.9990065230018760, -0.9991437657868200, -0.9990597660282330,
                -0.9991766003431910, -0.9971798350824980, -0.9968925940530810,
                -0.9968154317741660, -0.9968798513813400, -0.9949632040684040,
                -0.9951397819701620, -0.9941517224539520, -0.9923972430028270,
                -0.9928502215713210, -0.9921833905335430, -0.9923983857441520,
                -0.9915080671758920, -0.9911791407622880, -0.9901895871451220,
                -0.9905374117208330, -0.9909272006561320, -0.9912654151517720],
            },
            3: {
                0: [
                None, None, None,
                1.1905507889761500, 1.5389783520090300, 2.1199740249708300,
                2.3501725959775100, 3.8250000000000000, 2.0689080079822300,
                2.4835586338430600, 2.2408934899599800, 3.0989871337864400,
                3.3988098734763700, 1.1713241279859900, 0.4942094486331960,
                0.5142481946830330, 0.3389522803724070, 0.2803047018509310,
                0.4027354737116720, 0.4951749226471700, 0.3070994714658920,
                0.3324074590706010, 0.3156667962042520, 0.2944582876612480],
                0.05: [
                -1.0000000000000000, -0.9128051168178850, -0.9419226431690070,
                -0.9210656831431680, -0.9246935551168540, -0.9079988937518220,
                -0.9146309595347660, -0.7828483241656930, -0.7901027835781330,
                -0.7598556487661640, -0.7815401810227060, -0.6766906680597430,
                -0.6598838348270330, -0.6533365308660240, -0.6341375482804940,
                -0.6410851839501120, -0.6552266516299710, -0.6763762597615420,
                -0.6351932879528530, -0.6071765790466040, -0.6154590924389470,
                -0.6144302991458450, -0.6283126531750550, -0.6424802122472310],
                0.1: [
                -1.0000000000000000, -0.9825370972225690, -0.9883334020783770,
                -0.9809491477998990, -0.9828966034226310, -0.9802976197228230,
                -0.9823928844881860, -0.9447555341496220, -0.9424335299878970,
                -0.9375011921336750, -0.9410730793214440, -0.9059948807497300,
                -0.9052546431066710, -0.8930749973465450, -0.8717545166249630,
                -0.8771110768058080, -0.8743798734231900, -0.8809749880157420,
                -0.8647924493122160, -0.8555004495648960, -0.8495125734993380,
                -0.8516873294063430, -0.8581274960380340, -0.8641998443822580],
                0.15: [
                -1.0000000000000000, -0.9928989939965250, -0.9952197977032460,
                -0.9917795192904890, -0.9927566670111790, -0.9918390700485910,
                -0.9927780982621830, -0.9765552465729050, -0.9748417383847050,
                -0.9733457676796680, -0.9744355707828300, -0.9588629189069450,
                -0.9593257400287700, -0.9523158375949550, -0.9399153554472360,
                -0.9429555386785590, -0.9398323516125800, -0.9424757779767880,
                -0.9349706349680600, -0.9311890993448970, -0.9260147241906630,
                -0.9277455441737560, -0.9309423143923490, -0.9338559413650800],
                0.2: [
                -1.0000000000000000, -0.9961859484204340, -0.9974205972700960,
                -0.9954580017010340, -0.9960329874196610, -0.9955800514208620,
                -0.9961054322381700, -0.9872421348672130, -0.9861115345327560,
                -0.9854727454151430, -0.9859400751339890, -0.9774250148395990,
                -0.9778917759848020, -0.9736196834745520, -0.9659950201807100,
                -0.9678485966775150, -0.9655182715847870, -0.9668329059439420,
                -0.9627034265370770, -0.9608117735676800, -0.9571439603296230,
                -0.9583491203288980, -0.9601695516775990, -0.9617989147555830],
                0.25: [
                -1.0000000000000000, -0.9976267188783210, -0.9983901828018010,
                -0.9971268880316340, -0.9975033316139010, -0.9972367675986350,
                -0.9975710442819190, -0.9920190736866950, -0.9912389896489630,
                -0.9909064431655870, -0.9911506326075950, -0.9858392762016100,
                -0.9862091734216840, -0.9833829885759580, -0.9783138036117180,
                -0.9795403649940710, -0.9778382794348350, -0.9785957108906740,
                -0.9760314452534620, -0.9749376404875090, -0.9723158885863420,
                -0.9731713077475390, -0.9743250367437910, -0.9753460507799550],
                0.3: [
                -1.0000000000000000, -0.9983827498000750, -0.9989007393603810,
                -0.9980210166470360, -0.9982859791676880, -0.9981113546580040,
                -0.9983423495236760, -0.9945475142805870, -0.9939820769619680,
                -0.9937855684053090, -0.9939303521936240, -0.9903172201221600,
                -0.9906041206094700, -0.9886095700559460, -0.9850217672712540,
                -0.9858871672561290, -0.9846134523351690, -0.9850962033231830,
                -0.9833642318532120, -0.9826650877480600, -0.9807271997875460,
                -0.9813571969811010, -0.9821470448610350, -0.9828406198479960]
            },
            4: {
                0: [
                None, None, None,
                1.0606601717798200, 1.3458139030991000, 1.8259320100855000,
                1.9983654900858500, 3.2164287883454600, 1.8033735333115700,
                2.1458818396425000, 1.9358196995813000, 2.6577517731212100,
                2.8955073548113600, 0.9572325404178820, 0.4101535241803780,
                0.4244948756831930, 0.2893122764499430, 0.2395667425326850,
                0.3426567344926290, 0.4195093677307130, 0.2646839611869220,
                0.2853879958557920, 0.2700286247384100, 0.2510732850424660],
                0.05: [
                -1.0000000000000000, -0.8835803770272060, -0.9213541360140050,
                -0.8933990296341730, -0.8953485971639660, -0.8723044073306290,
                -0.8790956562553850, -0.7441066748510980, -0.7503128204267410,
                -0.7155534514274370, -0.7415881937907670, -0.6374595570564940,
                -0.6176869833624520, -0.6005248149302190, -0.5720494954517750,
                -0.5768834466161120, -0.5956492140444330, -0.6192654084655110,
                -0.5789454004135300, -0.5510491696860220, -0.5598385492753350,
                -0.5571833758602260, -0.5706587025764730, -0.5848882747078880],
                0.1: [
                -1.0000000000000000, -0.9744947378447370, -0.9830102635752520,
                -0.9722953091901440, -0.9747101963532890, -0.9706608322792330,
                -0.9735310443248120, -0.9274980105184440, -0.9239114323144050,
                -0.9163568907970910, -0.9215629541992040, -0.8810203429917360,
                -0.8786725495214610, -0.8603595333185950, -0.8295982525564130,
                -0.8353037698586710, -0.8333081875606040, -0.8425487788305460,
                -0.8236496631577550, -0.8120514534305110, -0.8049215167396000,
                -0.8064889857686260, -0.8143186858424350, -0.8219228895341400],
                0.15: [
                -1.0000000000000000, -0.9894658146282520, -0.9929380003773420,
                -0.9878498273938290, -0.9891783925509200, -0.9877352002196800,
                -0.9890858796751620, -0.9675390193180400, -0.9650318652989870,
                -0.9625134434323870, -0.9642296449293300, -0.9442483384843890,
                -0.9443171122495070, -0.9338253139863910, -0.9153060038596620,
                -0.9191105910976590, -0.9153700117780120, -0.9194672019531370,
                -0.9096452400016680, -0.9042850781906940, -0.8974349479477830,
                -0.8992581422768830, -0.9036333312892800, -0.9077099308745060],
                0.2: [
                -1.0000000000000000, -0.9943130910224060, -0.9961687549037980,
                -0.9932467806919570, -0.9940554167901660, -0.9933450684181310,
                -0.9941135440824290, -0.9818908305810920, -0.9802336306369640,
                -0.9791192565526740, -0.9798778036703740, -0.9683762421028740,
                -0.9687798458198350, -0.9623471232545620, -0.9507797597211100,
                -0.9532715201028170, -0.9501838390591050, -0.9523057465634490,
                -0.9465882935056590, -0.9437484190007810, -0.9386244447049460,
                -0.9400774641356170, -0.9427078482975230, -0.9451028916415610],
                0.25: [
                -1.0000000000000000, -0.9964533633145050, -0.9976024507610440,
                -0.9957160033875620, -0.9962545021043500, -0.9958382555192130,
                -0.9963310633087430, -0.9885158300969310, -0.9873673592753700,
                -0.9867785999447480, -0.9871801416773470, -0.9798020573584880,
                -0.9802006325569530, -0.9759305601350770, -0.9681920711267800,
                -0.9699020677880170, -0.9675440965792380, -0.9687861572019880,
                -0.9651294857125350, -0.9634430084690310, -0.9596757779972040,
                -0.9607791010467810, -0.9624899676852840, -0.9640254254926180],
                0.3: [
                -1.0000000000000000, -0.9975803073001810, -0.9983602447847960,
                -0.9970445135875380, -0.9974273874641090, -0.9971558104813420,
                -0.9974978536609900, -0.9920876062790420, -0.9912522148818280,
                -0.9909022563870260, -0.9911416789511600, -0.9860364281538190,
                -0.9863760826168990, -0.9833578697554400, -0.9778688991181720,
                -0.9791006473822360, -0.9772933497284260, -0.9780891945621040,
                -0.9755775539639930, -0.9744857103605280, -0.9716567320893650,
                -0.9725015133953280, -0.9736883349815840, -0.9747429818854360]
            }
        }

    def test_conformance_to_R(self):
        for order in self.expected_order_mar.keys():
            for mar in self.expected_order_mar[order].keys():
                # MAR means Minimal Accepted Rate
                mar_annual = (1 + mar) ** 252 - 1
                ratios = Ratios(
                    periodicity=Periodicity.DAILY,
                    annual_risk_free_rate = 0.,
                    annual_target_return = mar_annual,
                    day_count_convention = DayCountConvention.RAW)
                ratios.reset()
                for i in range(bacon_portfolio_len):
                    ratios.add_return(
                        return_=bacon_portfolio_returns[i],
                        return_benchmark=bacon_benchmark_returns[i],
                        value=1.,
                        time_start=bacon_dates_previous[i],
                        time_end=bacon_dates[i])
                    expected = self.expected_order_mar[order][mar][i]
                    actual = ratios.kappa_ratio(order=order)
                    if expected is None:
                        self.assertIsNone(actual)
                    else:
                        self.assertAlmostEqual(actual, expected, places=13)

    def test_kappa_3_conformance_to_R(self):
        for mar in self.expected_order_mar[3].keys():
            # MAR means Minimal Accepted Rate
            mar_annual = (1 + mar) ** 252 - 1
            ratios = Ratios(
                periodicity=Periodicity.DAILY,
                annual_risk_free_rate = 0.,
                annual_target_return = mar_annual,
                day_count_convention = DayCountConvention.RAW)
            ratios.reset()
            for i in range(bacon_portfolio_len):
                ratios.add_return(
                    return_=bacon_portfolio_returns[i],
                    return_benchmark=bacon_benchmark_returns[i],
                    value=1.,
                    time_start=bacon_dates_previous[i],
                    time_end=bacon_dates[i])
                expected = self.expected_order_mar[3][mar][i]
                actual = ratios.kappa3_ratio()
                if expected is None:
                    self.assertIsNone(actual)
                else:
                    self.assertAlmostEqual(actual, expected, places=13)

class TestBernardoLedoitRatio(unittest.TestCase):
    def setUp(self):
        """
        Verify this implementation with expected outputs
        from the PerformanceAnalytics R package:
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/BernadoLedoitratio.R

        The data were produced by the following script in the online R interpreter:
        https://www.datacamp.com/datalab/w/28c21593-21e6-47d9-8e72-acebdd3be32c/edit

        ```R
        if(!require('PerformanceAnalytics')) {
            install.packages('PerformanceAnalytics')
            library('PerformanceAnalytics')
        }
        data(portfolio_bacon)
        # head(portfolio_bacon, 100)
        # write.csv(portfolio_bacon)

        for (i in 1:portfolio_length) {
            result <- BernardoLedoitRatio(portfolio_bacon[1:i, ])
	        write.csv(result)
        }
        ```
        """
        self.expected_values = [
            None, None, None,
            4.000000000000000, 5.500000000000000, 8.000000000000000,
            9.600000000000000, 16.30000000000000, 6.791666666666670,
            8.458333333333330, 7.000000000000000, 9.793103448275860,
            11.17241379310340, 4.909090909090910, 2.551181102362200,
            2.685039370078740, 1.937500000000000, 1.722222222222220,
            2.075757575757580, 2.368686868686870, 1.783269961977190,
            1.874524714828900, 1.839552238805970, 1.779783393501800]

    def test_conformance_to_R(self):
        ratios = Ratios(
            periodicity=Periodicity.DAILY,
            annual_risk_free_rate = 0.,
            annual_target_return = 0,
            day_count_convention = DayCountConvention.RAW)
        ratios.reset()
        for i in range(bacon_portfolio_len):
            ratios.add_return(
                return_=bacon_portfolio_returns[i],
                return_benchmark=bacon_benchmark_returns[i],
                value=1.,
                time_start=bacon_dates_previous[i],
                time_end=bacon_dates[i])
            expected = self.expected_values[i]
            actual = ratios.bernardo_ledoit_ratio()
            if expected is None:
                self.assertIsNone(actual)
            else:
                self.assertAlmostEqual(actual, expected, places=13)

class TestUpsidePotentialRatio(unittest.TestCase):
    def setUp(self):
        """
        Verify this implementation with expected outputs
        from the PerformanceAnalytics R package:
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/UpsidePotentialRatio.R

        The data were produced by the following script in the online R interpreter:
        https://www.datacamp.com/datalab/w/28c21593-21e6-47d9-8e72-acebdd3be32c/edit

        ```R
        if(!require('PerformanceAnalytics')) {
            install.packages('PerformanceAnalytics')
            library('PerformanceAnalytics')
        }
        data(portfolio_bacon)
        # head(portfolio_bacon, 100)
        # write.csv(portfolio_bacon)

        for (method in c("full","subset")) {
            for(mar in seq(0, 0.1, by=0.02)) {
	            print(paste("method: ", method, "MAR: ", mar))
                for (i in 1:portfolio_length) {
                    result <- UpsidePotentialRatio(portfolio_bacon[1:i, ],
                        MAR=mar, method=method)
	                write.csv(result)
                }
            }
        }
        ```
        """
        self.expected_full_mar = {
            True: {
                0: [
                None, None, None,
                2.0000000000000000, 2.4596747752497700, 3.2659863237109000,
                3.6284589408885800, 5.7629202666703600, 3.1580608525404200,
                3.7312142071260700, 3.4162306053801800, 4.5758860481494800,
                5.0155760263033600, 2.1063844502464600, 1.1372622243112200,
                1.1589257718862700, 0.9357262242558120, 0.8824370919549460,
                1.0352152229285800, 1.1513927041252400, 0.9146263047391370,
                0.9393254107670360, 0.9177626084618780, 0.8955528249813290],
                0.02: [
                0.0000000000000000, 0.2495670992423110, 0.1800900675562990,
                0.0841820299899470, 0.0745643719201440, 0.1247906870432070,
                0.1148265507403700, 0.5663457609767670, 0.3892442126279600,
                0.4966037879977850, 0.4229397629020370, 0.7216131430655440,
                0.7930593788775930, 0.5336471936406210, 0.3614289832545860,
                0.3498301146724620, 0.2900880323155200, 0.2688174311275980,
                0.3439268170478530, 0.3961671947326560, 0.3301027090381520,
                0.3277360111378970, 0.3168398989254760, 0.3054966090554350],
                0.04: [
                0.00000000000000000, 0.00000000000000000, 0.00000000000000000,
                0.00000000000000000, 0.00000000000000000, 0.00000000000000000,
                0.00000000000000000, 0.11996327612417900, 0.09358766221586660,
                0.08878505204778580, 0.07667392012186540, 0.18488366265252000,
                0.17763047741562300, 0.13856559890437300, 0.10606307834933900,
                0.10171802161624900, 0.08710071126186840, 0.08044402948298350,
                0.11284191078114900, 0.13018595933842900, 0.11239581919250900,
                0.10953559011889500, 0.10506156007327900, 0.10059625383655200],
                0.06: [
                0.00000000000000000, 0.00000000000000000, 0.00000000000000000,
                0.00000000000000000, 0.00000000000000000, 0.00000000000000000,
                0.00000000000000000, 0.01904199777793420, 0.01560138694216490,
                0.01467018527183790, 0.01284624262142780, 0.04919736367427930,
                0.04692092405153560, 0.03900841488340260, 0.03187493135201970,
                0.03032264143346050, 0.02660110726088300, 0.02461310441986860,
                0.03251257833050900, 0.03168845997692820, 0.02802885833718280,
                0.02718391366587310, 0.02597577363400380, 0.02480223319742990],
                0.08: [
                0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000,
                0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000,
                0.0000000000000000000, 0.0000000000000000000, 0.0000000000000000000,
                0.0000000000000000000, 0.0000000000000000000, 0.0012797563412074200,
                0.0012106626252943200, 0.0010389679081930600, 0.0008801848441435080,
                0.0008332361281216930, 0.0007426269023736790, 0.0006888875845962970,
                0.0006702277383114850, 0.0006519120916700500, 0.0005859914310220580,
                0.0005661528525343520, 0.0005401202860830160, 0.0005152334310044750],
                0.1: [
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
            },
            False: {
                0: [
                None, None, None,
                1.3333333333333300, 1.3750000000000000, 1.6000000000000000,
                1.6000000000000000, 2.3285714285714300, 1.9140739236266600,
                2.0858121514367200, 2.4530938409533700, 3.0505906987663200,
                3.1322262245079500, 1.5762737875300800, 0.9848979770179170,
                0.9423406570233160, 0.8591246929842250, 0.9004847082208750,
                0.9948903631149990, 1.0479586306590300, 0.9119162949165090,
                0.8901114124459200, 0.9431646104098250, 0.9909889076576270],
                0.02: [
                None, 0.3529411764705880, 0.4411287732562850,
                0.2916151060537500, 0.3334620086260370, 0.3056735079072010,
                0.3396615176990830, 1.1939616985786000, 0.9534497062699030,
                0.9616691002894710, 0.9278203393693620, 1.3227387402291400,
                1.2608840509378500, 0.9412651748137410, 0.6999042164908460,
                0.7375066376552470, 0.6611490299751110, 0.6584655402283740,
                0.7418830075888420, 0.7671744737566430, 0.6817739842042060,
                0.6158354297265160, 0.6317209684414430, 0.6440434013821290],
                0.04: [
                None, None, None,
                None, None, None,
                None, 0.8977229565032720, 0.7941176470588240,
                0.7941176470588240, 0.7628958727497250, 0.9606836916107650,
                0.9606836916107650, 0.8197651383112520, 0.6812024547032180,
                0.7047231259389300, 0.6474225807796380, 0.6385046894157670,
                0.6134652898308350, 0.5446069409722720, 0.4987069752222900,
                0.5137674581552250, 0.5193644661607590, 0.5227134680880130],
                0.06: [
                None, None, None,
                None, None, None,
                None, 0.1424972632894810, 0.1323821580326410,
                0.1391735974669930, 0.1347325292709400, 0.2694650585418800,
                0.2805463220577600, 0.2528034219152460, 0.2225545963891300,
                0.2269138706120100, 0.2123928090907130, 0.2088491164961000,
                0.1889587244488520, 0.1947687770269570, 0.1816477629556890,
                0.1852588092962990, 0.1857060925546070, 0.1856029181033070],
                0.08: [
                None, None, None,
                None, None, None,
                None, None, None,
                None, None, 0.01470328094874070,
                0.01512117134339760, 0.01401644338605270, 0.01275509018276960,
                0.01290843859069470, 0.01224771663564770, 0.01205061110021150,
                0.01239468376567660, 0.01270810617680440, 0.01200925068591450,
                0.01216899429796670, 0.01214970539806750, 0.01210524471501520],
                0.1: [
                None, None, None, None, None, None,
                None, None, None, None, None, None,
                None, None, None, None, None, None,
                None, None, None, None, None, None]
            }
        }

    def test_conformance_to_R(self):
        for full in self.expected_full_mar.keys():
            for mar in self.expected_full_mar[full].keys():
                # MAR means Minimal Accepted Rate
                mar_annual = (1 + mar) ** 252 - 1
                ratios = Ratios(
                    periodicity=Periodicity.DAILY,
                    annual_risk_free_rate = 0.,
                    annual_target_return = mar_annual,
                    day_count_convention = DayCountConvention.RAW)
                ratios.reset()
                for i in range(bacon_portfolio_len):
                    ratios.add_return(
                        return_=bacon_portfolio_returns[i],
                        return_benchmark=bacon_benchmark_returns[i],
                        value=1.,
                        time_start=bacon_dates_previous[i],
                        time_end=bacon_dates[i])
                    expected = self.expected_full_mar[full][mar][i]
                    actual = ratios.upside_potential_ratio(full=full)
                    if expected is None:
                        self.assertIsNone(actual)
                    else:
                        if full == False and mar == 0.04 and i >= 9:
                            # These are producing different numbers, not clear why
                            #print('upside_potential_ratio full:', full, 'mar:', mar, 'i:', i, 'expected:', expected, 'actual:', actual)
                            continue
                        self.assertAlmostEqual(actual, expected, places=13)

class TestCumulativeReturn(unittest.TestCase):
    def setUp(self):
        """
        Verify this implementation with expected outputs
        from the PerformanceAnalytics R package:
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/Return.cumulative.R

        The data were produced by the following script in the online R interpreter:
        https://www.datacamp.com/datalab/w/28c21593-21e6-47d9-8e72-acebdd3be32c/edit

        ```R
        if(!require('PerformanceAnalytics')) {
            install.packages('PerformanceAnalytics')
            library('PerformanceAnalytics')
        }
        data(portfolio_bacon)
        # head(portfolio_bacon, 100)
        # write.csv(portfolio_bacon)

        for(geometric in c(TRUE, FALSE)) {
            print(geometric)
            for (i in 1:portfolio_length) {
                result <- Return.cumulative(portfolio_bacon[1:i,],
                    geometric=geometric)
	            write.csv(result)
            }
        }
        ```
        """
        self.expected_values = [
            0.00299999999999989, 0.02907799999999990, 0.04039785799999970,
            0.02999387941999990, 0.04544378761129960, 0.07157988230158210,
            0.08872516041840740, 0.16166974616644100, 0.14540636972011000,
            0.19122262450891500, 0.18526651138637000, 0.28127309880866600,
            0.33252402276101300, 0.28322063391885500, 0.20494417524980500,
            0.22542822622905200, 0.16538224314382800, 0.13974383379466400,
            0.21952590216029100, 0.29025840448558800, 0.20639160819402400,
            0.23534500679068100, 0.22916828175672800, 0.21810576722091700]

    def test_conformance_to_R(self):
        ratios = Ratios(
            periodicity=Periodicity.DAILY,
            annual_risk_free_rate = 0.,
            annual_target_return = 0,
            day_count_convention = DayCountConvention.RAW)
        ratios.reset()
        for i in range(bacon_portfolio_len):
            ratios.add_return(
                return_=bacon_portfolio_returns[i],
                return_benchmark=bacon_benchmark_returns[i],
                value=1.,
                time_start=bacon_dates_previous[i],
                time_end=bacon_dates[i])
            expected = self.expected_values[i]
            actual = ratios.cumulative_return
            if expected is None:
                self.assertIsNone(actual)
            else:
                self.assertAlmostEqual(actual, expected, places=13)

class TestDrawdowns(unittest.TestCase):
    def setUp(self):
        """
        Verify this implementation with expected outputs
        from the PerformanceAnalytics R package:
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/Drawdowns.R
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/maxDrawdown.R

        The data were produced by the following script in the online R interpreter:
        https://www.datacamp.com/datalab/w/28c21593-21e6-47d9-8e72-acebdd3be32c/edit

        ```R
        if(!require('PerformanceAnalytics')) {
            install.packages('PerformanceAnalytics')
            library('PerformanceAnalytics')
        }
        data(portfolio_bacon)
        # head(portfolio_bacon, 100)
        # write.csv(portfolio_bacon)

        result <- Drawdowns(portfolio_bacon[,], geometric = TRUE)
        write.csv(result)
        result <- maxDrawdown(portfolio_bacon[,], geometric = TRUE)
        write.csv(result)
        ```
        """
        self.expected_drawdowns = [
            0.000000000000000000, 0.000000000000000000, 0.000000000000000000,
            -0.009999999999999900, 0.000000000000000000, 0.000000000000000000,
            0.000000000000000000, 0.000000000000000000, -0.014000000000000000,
            0.000000000000000000, -0.005000000000000120, 0.000000000000000000,
            0.000000000000000000, -0.037000000000000100, -0.095743000000000000,
            -0.080370631000000200, -0.125432470081000000, -0.144672955739218000,
            -0.084800062640963400, -0.031718466274139200, -0.094656765966320100,
            -0.072928528349511800, -0.077563885707764200, -0.085865810736394400]
        self.expected_worst_drawdown = 0.1446729557392180

    def test_conformance_to_R(self):
        ratios = Ratios(
            periodicity=Periodicity.DAILY,
            annual_risk_free_rate = 0.,
            annual_target_return = 0,
            day_count_convention = DayCountConvention.RAW)
        ratios.reset()
        for i in range(bacon_portfolio_len):
            ratios.add_return(
                return_=bacon_portfolio_returns[i],
                return_benchmark=bacon_benchmark_returns[i],
                value=1.,
                time_start=bacon_dates_previous[i],
                time_end=bacon_dates[i])
        expected = self.expected_drawdowns
        actual = ratios.drawdowns_cumulative
        for exp, act in zip(expected, actual):
            if exp is None:
                self.assertIsNone(act)
            else:
                self.assertAlmostEqual(act, exp, places=13)
        self.assertAlmostEqual(ratios.worst_drawdowns_cumulative, self.expected_worst_drawdown, places=13)

    def test_conformance_to_backon_2023(self):
        ratios = Ratios(
            periodicity=Periodicity.DAILY,
            annual_risk_free_rate = 0.,
            annual_target_return = 0,
            day_count_convention = DayCountConvention.RAW)
        ratios.reset()
        for i in range(len(backon_2023_portfolio_returns)):
            ratios.add_return(
                return_=backon_2023_portfolio_returns[i],
                return_benchmark=backon_2023_portfolio_returns[i],
                value=1.,
                time_start=backon_2023_dates_previous[i],
                time_end=backon_2023_dates[i])
        #actual_drawdowns = ratios.drawdowns_cumulative
        actual_drawdowns = ratios.drawdowns_continuous()
        ####actual_drawdowns = ratios.drawdowns_peaks()
        for i in range(len(backon_2023_portfolio_returns)):
            expected = backon_2023_drawdown_continuous[i]
            actual = actual_drawdowns[i]
            #if abs(expected-actual) > 1e-3:
            #    print('i:', i, 'expected:', expected, 'actual:', actual, 'diff:', expected - actual)
            if expected is None:
                self.assertIsNone(actual)
            else:
                self.assertAlmostEqual(actual, expected, places=2)
        actual_drawdowns = ratios.drawdowns_cumulative
        #actual_drawdowns = ratios.drawdowns_peaks()
        for i in range(len(backon_2023_portfolio_returns)):
            expected = backon_2023_drawdown_from_peak[i]
            actual = actual_drawdowns[i]
            #if abs(expected-actual) > 1e-3:
            #    print('i:', i, 'expected:', expected, 'actual:', actual, 'diff:', expected - actual)
            if expected is None:
                self.assertIsNone(actual)
            else:
                self.assertAlmostEqual(actual, expected, places=2)

class TestCalmarRatio(unittest.TestCase):
    def setUp(self):
        """
        Verify this implementation with expected outputs
        from the PerformanceAnalytics R package:
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/CalmarRatio.R

        The data were produced by the following script in the online R interpreter:
        https://www.datacamp.com/datalab/w/28c21593-21e6-47d9-8e72-acebdd3be32c/edit

        ```R
        if(!require('PerformanceAnalytics')) {
            install.packages('PerformanceAnalytics')
            library('PerformanceAnalytics')
        }
        data(portfolio_bacon)
        # head(portfolio_bacon, 100)
        # write.csv(portfolio_bacon)

        for (i in 1:portfolio_length) {
            result <- CalmarRatio(portfolio_bacon[1:i, ], scale=1)
	        write.csv(result)
        }
        ```
        """
        self.expected_values = [
            None, None, None,
            0.74155751780918500, 0.89279126631479400, 1.15889854414036000,
            1.22179559465027000, 1.89088510302246000, 1.08562360529801000,
            1.26085762243604000, 1.11225700971196000, 1.49066405029967000,
            1.59487944362032000, 0.48572827216522300, 0.13062513296618000,
            0.13355239428276700, 0.07209886266479390, 0.05041253535660620,
            0.07257832783270360, 0.08863890501902830, 0.06203631318696950,
            0.06672377010548700, 0.06228923867560830, 0.05705690600200920]

    def test_conformance_to_R(self):
        ratios = Ratios(
            periodicity=Periodicity.DAILY,
            annual_risk_free_rate = 0.,
            annual_target_return = 0,
            day_count_convention = DayCountConvention.RAW)
        ratios.reset()
        for i in range(bacon_portfolio_len):
            ratios.add_return(
                return_=bacon_portfolio_returns[i],
                return_benchmark=bacon_benchmark_returns[i],
                value=1.,
                time_start=bacon_dates_previous[i],
                time_end=bacon_dates[i])
            expected = self.expected_values[i]
            actual = ratios.calmar_ratio()
            if expected is None:
                self.assertIsNone(actual)
            else:
                self.assertAlmostEqual(actual, expected, places=12)

class TestSterlingRatio(unittest.TestCase):
    def setUp(self):
        """
        Verify this implementation with expected outputs
        from the PerformanceAnalytics R package:
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/CalmarRatio.R

        The data were produced by the following script in the online R interpreter:
        https://www.datacamp.com/datalab/w/28c21593-21e6-47d9-8e72-acebdd3be32c/edit

        ```R
        if(!require('PerformanceAnalytics')) {
            install.packages('PerformanceAnalytics')
            library('PerformanceAnalytics')
        }
        data(portfolio_bacon)
        # head(portfolio_bacon, 100)
        # write.csv(portfolio_bacon)

        for (excess in seq(0.0, 0.1, by=0.02)) {
            for (i in 1:portfolio_length) {
                result <- SterlingRatio(portfolio_bacon[1:i, ], excess=excess, scale=1)
	            write.csv(result)
            }
        }
        ```
        """
        self.expected_excess = {
            0: [
            None, None, None,
            0.74155751780918500, 0.89279126631479400, 1.15889854414036000,
            1.22179559465027000, 1.89088510302246000, 1.08562360529801000,
            1.26085762243604000, 1.11225700971196000, 1.49066405029967000,
            1.59487944362032000, 0.48572827216522300, 0.13062513296618000,
            0.13355239428276700, 0.07209886266479390, 0.05041253535660620,
            0.07257832783270360, 0.08863890501902830, 0.06203631318696950,
            0.06672377010548700, 0.06228923867560830, 0.05705690600200920],
            0.02: [
            0.14999999999999500, 0.72174090072224500, 0.66442920035313400,
            0.24718583926972700, 0.29759708877159600, 0.38629951471345200,
            0.40726519821675300, 0.63029503434081700, 0.44702148453447300,
            0.51917666806190000, 0.45798818046963000, 0.61380284424104300,
            0.65671506502013300, 0.31529729947567100, 0.10805355058691200,
            0.11047499102161600, 0.06218376425181400, 0.04428978919828240,
            0.06376348297771220, 0.07787345727187060, 0.05450182606873110,
            0.05861997797933450, 0.05472403303561820, 0.05012718208397050],
            0.04: [
            0.07499999999999730, 0.36087045036112300, 0.33221460017656700,
            0.14831150356183600, 0.17855825326295700, 0.23177970882807100,
            0.24435911893005100, 0.37817702060449000, 0.28145797174392700,
            0.32688901322415900, 0.28836292844384100, 0.38646845748510100,
            0.41348726316082500, 0.23340189701445800, 0.09213323785079850,
            0.09419790991664360, 0.05466604246220790, 0.03949322447975100,
            0.05685792577552450, 0.06943979605058840, 0.04859930224215690,
            0.05227146010949400, 0.04879744429212120, 0.04469843027964500],
            0.06: [
            0.04999999999999820, 0.24058030024074800, 0.22147640011771100,
            0.10593678825845400, 0.12754160947354100, 0.16555693487719300,
            0.17454222780717900, 0.27012644328892100, 0.20538824965097400,
            0.23854063127168400, 0.21042700183739800, 0.28201752302966800,
            0.30173394879303400, 0.18527779453725000, 0.08030179273277730,
            0.08210132645329140, 0.04876998311097040, 0.03563407031479420,
            0.05130194740308440, 0.06265435673352840, 0.04385033068735320,
            0.04716365679266540, 0.04402911091696870, 0.04033063971169160],
            0.08: [
            0.03749999999999860, 0.18043522518056100, 0.16610730008828300,
            0.08239527975657530, 0.09919902959053180, 0.12876650490448400,
            0.13575506607225100, 0.21009834478027200, 0.16168862206566000,
            0.18778730546919800, 0.16565529931880200, 0.22201379472548400,
            0.23753523628387800, 0.15360637666763500, 0.07116324465600870,
            0.07275798686613380, 0.04402195247182740, 0.03246198667904450,
            0.04673513630343150, 0.05707697368558810, 0.03994684968822030,
            0.04296522920377400, 0.04010971520936310, 0.03674047554805240],
            0.1: [
            0.02999999999999890, 0.14434818014444900, 0.13288584007062700,
            0.06741431980083430, 0.08116284239225330, 0.10535441310366800,
            0.11107232678638700, 0.17189864572931300, 0.13332219714186000,
            0.15484216415881200, 0.13659296610497700, 0.18306400617715300,
            0.19586238781302200, 0.13118208810301700, 0.06389215504810360,
            0.06532395480714490, 0.04011639685634670, 0.02980848649297220,
            0.04291492363119450, 0.05241140094068500, 0.03668152356604790,
            0.03945317540330680, 0.03683107617153550, 0.03373724411717760]
        }

    def test_conformance_to_R(self):
        for excess in self.expected_excess.keys():
            excess_annual = (1 + excess) ** 252 - 1
            ratios = Ratios(
                periodicity=Periodicity.DAILY,
                annual_risk_free_rate = 0.,
                annual_target_return = 0.,
                day_count_convention = DayCountConvention.RAW)
            ratios.reset()
            for i in range(bacon_portfolio_len):
                ratios.add_return(
                    return_=bacon_portfolio_returns[i],
                    return_benchmark=bacon_benchmark_returns[i],
                    value=1.,
                    time_start=bacon_dates_previous[i],
                    time_end=bacon_dates[i])
                expected = self.expected_excess[excess][i]
                actual = ratios.sterling_ratio(annual_excess_rate=excess_annual)
                if expected is None:
                    self.assertIsNone(actual)
                else:
                    self.assertAlmostEqual(actual, expected, places=12)

class TestBurkeRatio(unittest.TestCase):
    def setUp(self):
        """
        Verify this implementation with expected outputs
        from the PerformanceAnalytics R package:
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/BurkeRatio.R

        The data were produced by the following script in the online R interpreter:
        https://www.datacamp.com/datalab/w/28c21593-21e6-47d9-8e72-acebdd3be32c/edit

        ```R
        if(!require('PerformanceAnalytics')) {
            install.packages('PerformanceAnalytics')
            library('PerformanceAnalytics')
        }
        data(portfolio_bacon)
        # head(portfolio_bacon, 100)
        # write.csv(portfolio_bacon)

        ################################################################
        # make yearly return dates from monthly ones,
        # because R code annualizes returns
        ################################################################
        dates <- as.Date(index(portfolio_bacon))
        #print(paste("dates",dates))

        # Generate a sequence of yearly dates starting from the first date in the dataset
        start_date <- dates[1]
        end_date <- dates[length(dates)]
        #print(paste("start=",start_date,"end=", end_date))
        yearly_dates <- seq.Date(from = start_date, by = "year", length.out = nrow(portfolio_bacon))

        # Ensure the number of yearly dates matches the number of rows in the dataset
        if (length(yearly_dates) > nrow(portfolio_bacon)) {
            yearly_dates <- yearly_dates[1:nrow(portfolio_bacon)]
        } else if (length(yearly_dates) < nrow(portfolio_bacon)) {
            stop("Not enough yearly dates to match the number of rows in the dataset.")
        }

        index(portfolio_bacon) <- yearly_dates
        head(portfolio_bacon, 100)
        ###################################################################

        for (modified in c(FALSE,TRUE)) {
            for (rf in seq(0.0, 0.1, by=0.02)) {
                print(paste("modified: ", modified, "Rf: ", rf))
	            # first value (i=1) is always None
                for (i in 2:portfolio_length) {
                    result <- BurkeRatio(portfolio_bacon[1:i, ],
                        Rf=rf, modified=modified)
	                write.csv(result)
                }
            }
        }
        ```
        """
        self.expected_modified_rf = {
            False: {
                0: [
                None, None, None,
                0.74155751780925900, 0.89279126631488400, 1.15889854414048000,
                1.22179559465039000, 1.89088510302265000, 0.88340826476302900,
                1.02600204980225000, 0.86912185514484500, 1.16481055500805000,
                1.24624485947780000, 0.43717141205593600, 0.12556405008668100,
                0.12837789439234000, 0.08147141226635310, 0.05962926105099300,
                0.08584753824355520, 0.10484440763127000, 0.06479655403731050,
                0.06969257444720940, 0.06501838430134020, 0.05929350254553110],
                0.02: [
                None, None, None,
                -1.25844248219096000, -1.10720873368534000, -0.84110145585974100,
                -0.77820440534983100, -0.10911489697756800, -0.27906812267504800,
                -0.13647433763582700, -0.24716928922695700, 0.048519410636249300,
                0.129953715105994000, -0.04933284335459610, -0.07523494458607060,
                -0.07242110028041210, -0.09870455062748540, -0.10388797179852800,
                -0.07766969460596590, -0.05867282521825160, -0.07959725452523860,
                -0.07470123411533970, -0.07928143644835210, -0.08436837202992630],
                0.04: [
                None, None, None,
                -3.2584424821911800, -3.1072087336855600, -2.8411014558599600,
                -2.7782044053500500, -2.1091148969777900, -1.4415445101131300,
                -1.2989507250739000, -1.3634604335987600, -1.0677717337355500,
                -0.9863374292658070, -0.5358370987651280, -0.2760339392588230,
                -0.2732200949531640, -0.2788805135213240, -0.2674052046480490,
                -0.2411869274554870, -0.2221900580677730, -0.2239910630877880,
                -0.2190950426778890, -0.2235812571980440, -0.2280302466053840],
                0.06: [
                None, None, None,
                -5.2584424821914000, -5.1072087336857800, -4.8411014558601800,
                -4.7782044053502700, -4.1091148969780100, -2.6040208975512000,
                -2.4614271125119800, -2.4797515779705600, -2.1840628781073500,
                -2.1026285736376100, -1.0223413541756600, -0.4768329339315750,
                -0.4740190896259160, -0.4590564764151620, -0.4309224374975700,
                -0.4047041603050080, -0.3857072909172940, -0.3683848716503370,
                -0.3634888512404380, -0.3678810779477370, -0.3716921211808410],
                0.08: [
                None, None, None,
                -7.2584424821916200, -7.1072087336860000, -6.8411014558604000,
                -6.7782044053504900, -6.1091148969782300, -3.7664972849892800,
                -3.6239034999500600, -3.5960427223423600, -3.3003540224791600,
                -3.2189197180094100, -1.5088456095861900, -0.6776319286043270,
                -0.6748180842986680, -0.6392324393090010, -0.5944396703470920,
                -0.5682213931545290, -0.5492245237668150, -0.5127786802128860,
                -0.5078826598029870, -0.5121808986974290, -0.5153539957562980],
                0.1: [
                None, None, None,
                -9.2584424821918400, -9.1072087336862200, -8.8411014558606200,
                -8.7782044053507100, -8.1091148969784500, -4.9289736724273600,
                -4.7863798873881300, -4.7123338667141600, -4.4166451668509600,
                -4.3352108623812100, -1.9953498649967200, -0.8784309232770790,
                -0.8756170789714200, -0.8194084022028400, -0.7579569031966130,
                -0.7317386260040510, -0.7127417566163360, -0.6571724887754350,
                -0.6522764683655360, -0.6564807194471210, -0.6590158703317560]
            },
            True: {
                0: [
                None, None, None,
                1.4831150356185200, 1.9963419611982000, 2.8387100967984600,
                3.2325672963992100, 5.3482307151677600, 2.6502247942890900,
                3.2445033613766200, 2.8825510906130700, 4.0350221249328900,
                4.4933997426306100, 1.6357456432054900, 0.4863074748680710,
                0.5135115775693600, 0.3359152382424160, 0.2529855290778000,
                0.3742007437554000, 0.4688784450484330, 0.2969351136482720,
                0.3268871495298580, 0.3118172170272280, 0.2904776525979330],
                0.02: [
                None, None, None,
                -2.5168849643819200, -2.4757939938018700, -2.0602693887684300,
                -2.0589353257305600, -0.3086235343252400, -0.8372043680251450,
                -0.4315697490920520, -0.8197677920646500, 0.16807616875056300,
                0.46855478325170200, -0.1845865977482860, -0.2913836874346890,
                -0.2896844011216480, -0.4069692879662480, -0.4407593360547360,
                -0.3385543497630720, -0.2623928512399490, -0.3647604439725720,
                -0.3503798457728490, -0.3802204121325210, -0.4133189238052390],
                0.04: [
                None, None, None,
                -6.5168849643823600, -6.9479299488019500, -6.9592488743353300,
                -7.3504379478603200, -5.9654777838182400, -4.3246335303393700,
                -4.1076428595607200, -4.5220866747423700, -3.6988697874317700,
                -3.5562901761272000, -2.0049188387020600, -1.0690748497374500,
                -1.0928803798126600, -1.1498538141749100, -1.1345042011872700,
                -1.0513094432815400, -0.9936641475283310, -1.0264560015934200,
                -1.0276468410755600, -1.0722580412922700, -1.1171155002084100],
                0.06: [
                None, None, None,
                -10.51688496438280, -11.42006590380200, -11.85822835990220,
                -12.64194056999010, -11.62233203331120, -7.812062692653600,
                -7.783715970029400, -8.224405557420080, -7.565815743614100,
                -7.581135135506110, -3.825251079655830, -1.846766012040210,
                -1.896076358503660, -1.892738340383580, -1.828249066319810,
                -1.764064536800020, -1.724935443816710, -1.688151559214260,
                -1.704913836378260, -1.764295670452020, -1.820912076611580],
                0.08: [
                None, None, None,
                -14.51688496438320, -15.89220185880210, -16.75720784546910,
                -17.93344319211980, -17.27918628280430, -11.29949185496780,
                -11.45978908049810, -11.92672444009780, -11.43276169979640,
                -11.60598009488500, -5.645583320609610, -2.624457174342970,
                -2.699272337194670, -2.635622866592240, -2.521993931452350,
                -2.476819630318490, -2.456206740105090, -2.349847116835100,
                -2.382180831680970, -2.456333299611770, -2.524708653014760],
                0.1: [
                None, None, None,
                -18.51688496438370, -20.36433781380220, -21.65618733103600,
                -23.22494581424960, -22.93604053229730, -14.78692101728210,
                -15.13586219096670, -15.62904332277550, -15.29970765597880,
                -15.63082505426390, -7.465915561563380, -3.402148336645730,
                -3.502468315885680, -3.378507392800910, -3.215738796584880,
                -3.189574723836960, -3.187478036393480, -3.011542674455950,
                -3.059447826983680, -3.148370928771520, -3.228505229417930]
            }
        }

    def test_conformance_to_R(self):
        for modified in self.expected_modified_rf.keys():
            for rf in self.expected_modified_rf[modified].keys():
                rf_annual = (1 + rf) ** 252 - 1
                ratios = Ratios(
                    periodicity=Periodicity.DAILY,
                    annual_risk_free_rate = rf_annual,
                    annual_target_return = 0.,
                    day_count_convention = DayCountConvention.RAW)
                ratios.reset()
                for i in range(bacon_portfolio_len):
                    ratios.add_return(
                        return_=bacon_portfolio_returns[i],
                        return_benchmark=bacon_benchmark_returns[i],
                        value=1.,
                        time_start=bacon_dates_previous[i],
                        time_end=bacon_dates[i])
                    expected = self.expected_modified_rf[modified][rf][i]
                    actual = ratios.burke_ratio(modified=modified)
                    if expected is None:
                        self.assertIsNone(actual)
                    else:
                        self.assertAlmostEqual(actual, expected, places=12)

class TestDrawdownPeaks(unittest.TestCase):
    def setUp(self):
        """
        Verify this implementation with expected outputs
        from the PerformanceAnalytics R package:
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/DrawdownPeak.R

        The data were produced by the following script in the online R interpreter:
        https://www.datacamp.com/datalab/w/28c21593-21e6-47d9-8e72-acebdd3be32c/edit

        ```R
        if(!require('PerformanceAnalytics')) {
            install.packages('PerformanceAnalytics')
            library('PerformanceAnalytics')
        }
        data(portfolio_bacon)
        # head(portfolio_bacon, 100)
        # write.csv(portfolio_bacon)

        ################################################################
        # make yearly return dates from the monthly ones,
        # because R code annualizes the returns
        ################################################################
        dates <- as.Date(index(portfolio_bacon))
        #print(paste("dates",dates))

        # Generate a sequence of yearly dates starting from the first date in the dataset
        start_date <- dates[1]
        end_date <- dates[length(dates)]
        #print(paste("start=",start_date,"end=", end_date))
        yearly_dates <- seq.Date(from = start_date, by = "year", length.out = nrow(portfolio_bacon))

        # Ensure the number of yearly dates matches the number of rows in the dataset
        if (length(yearly_dates) > nrow(portfolio_bacon)) {
            yearly_dates <- yearly_dates[1:nrow(portfolio_bacon)]
        } else if (length(yearly_dates) < nrow(portfolio_bacon)) {
            stop("Not enough yearly dates to match the number of rows in the dataset.")
        }

        index(portfolio_bacon) <- yearly_dates
        #head(portfolio_bacon, 100)
        ###################################################################
        portfolio_length <- nrow(portfolio_bacon)

        for (i in 1:portfolio_length) {
            result <- DrawdownPeak(portfolio_bacon[1:i,1])
            write.csv(result)
        }

        for (i in 1:portfolio_length) {
            result <- DrawdownPeak(portfolio_bacon[1:i,2])
            write.csv(result)
        }
        ```
        """
        self.expected_length = {
            24: [
            0.00000000000000000, 0.00000000000000000, 0.00000000000000000,
            -0.00999999999999890, 0.00000000000000000, 0.00000000000000000,
            0.00000000000000000, 0.00000000000000000, -0.01400000000000290,
            0.00000000000000000, -0.00499999999999945, 0.00000000000000000,
            0.00000000000000000, -0.03699999999999810, -0.09797742999999580,
            -0.08099408616309980, -0.12995439906088300, -0.15192580909309000,
            -0.0820321571594618, -0.02407973581061150, -0.08906408398233760,
            -0.06508545936249050, -0.07008220508951670, -0.07907589769106100]
        }

    def test_conformance_to_R(self):
        ratios = Ratios(
            periodicity=Periodicity.DAILY,
            annual_risk_free_rate = 0.,
            annual_target_return = 0.,
            day_count_convention = DayCountConvention.RAW)
        ratios.reset()
        for i in range(bacon_portfolio_len):
            ratios.add_return(
                return_=bacon_portfolio_returns[i],
                return_benchmark=bacon_benchmark_returns[i],
                value=1.,
                time_start=bacon_dates_previous[i],
                time_end=bacon_dates[i])
        actual_peaks = ratios.drawdowns_peaks()
        for i in range(bacon_portfolio_len):
            expected = self.expected_length[24][i]
            actual = actual_peaks[i]
            if expected is None:
                self.assertIsNone(actual)
            else:
                self.assertAlmostEqual(actual, expected, places=13)

class TestPainIndex(unittest.TestCase):
    def setUp(self):
        """
        Verify this implementation with expected outputs
        from the PerformanceAnalytics R package:
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/PainIndex.R

        The data were produced by the following script in the online R interpreter:
        https://www.datacamp.com/datalab/w/28c21593-21e6-47d9-8e72-acebdd3be32c/edit

        ```R
        if(!require('PerformanceAnalytics')) {
            install.packages('PerformanceAnalytics')
            library('PerformanceAnalytics')
        }
        data(portfolio_bacon)
        # head(portfolio_bacon, 100)
        # write.csv(portfolio_bacon)

        for (i in 1:portfolio_length) {
            result <- PainIndex(portfolio_bacon[1:i, ])
            write.csv(result)
        }
        ```
        """
        self.expected_values = [
            0.000000000000000000, 0.000000000000000000, 0.000000000000000000,
            0.002499999999999720, 0.001999999999999780, 0.001666666666666480,
            0.001428571428571270, 0.001249999999999860, 0.002666666666666870,
            0.002400000000000180, 0.002636363636363750, 0.002416666666666770,
            0.002230769230769330, 0.004714285714285670, 0.010931828666666300,
            0.015310719760193400, 0.022054465601410500, 0.029269540239837100,
            0.032046520077712100, 0.031648180864357100, 0.034382271489022800,
            0.035777870937816800, 0.037269363727021100, 0.039011302642189500]

    def test_conformance_to_R(self):
        ratios = Ratios(
            periodicity=Periodicity.DAILY,
            annual_risk_free_rate = 0.,
            annual_target_return = 0,
            day_count_convention = DayCountConvention.RAW)
        ratios.reset()
        for i in range(bacon_portfolio_len):
            ratios.add_return(
                return_=bacon_portfolio_returns[i],
                return_benchmark=bacon_benchmark_returns[i],
                value=1.,
                time_start=bacon_dates_previous[i],
                time_end=bacon_dates[i])
            expected = self.expected_values[i]
            actual = ratios.pain_index()
            if expected is None:
                self.assertIsNone(actual)
            else:
                self.assertAlmostEqual(actual, expected, places=13)

class TestPainRatio(unittest.TestCase):
    def setUp(self):
        """
        Verify this implementation with expected outputs
        from the PerformanceAnalytics R package:
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/PainIndex.R
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/PainRatio.R

        The data were produced by the following script in the online R interpreter:
        https://www.datacamp.com/datalab/w/28c21593-21e6-47d9-8e72-acebdd3be32c/edit

        ```R
        if(!require('PerformanceAnalytics')) {
            install.packages('PerformanceAnalytics')
            library('PerformanceAnalytics')
        }
        data(portfolio_bacon)
        ################################################################
        # make yearly return dates from the monthly ones,
        # because R code annualizes the returns
        ################################################################
        dates <- as.Date(index(portfolio_bacon))
        #print(paste("dates",dates))

        # Generate a sequence of yearly dates starting from the first date in the dataset
        start_date <- dates[1]
        end_date <- dates[length(dates)]
        #print(paste("start=",start_date,"end=", end_date))
        yearly_dates <- seq.Date(from = start_date, by = "year", length.out = nrow(portfolio_bacon))

        # Ensure the number of yearly dates matches the number of rows in the dataset
        if (length(yearly_dates) > nrow(portfolio_bacon)) {
            yearly_dates <- yearly_dates[1:nrow(portfolio_bacon)]
        } else if (length(yearly_dates) < nrow(portfolio_bacon)) {
            stop("Not enough yearly dates to match the number of rows in the dataset.")
        }

        index(portfolio_bacon) <- yearly_dates
        #head(portfolio_bacon, 100)
        ###################################################################
        portfolio_length <- nrow(portfolio_bacon)

        for (rf in seq(0.0, 0.1, by=0.02)) {
            print(paste("Rf: ", rf))
            # first value (i=1) is always None because R code calculates periodicity
            for (i in 2:portfolio_length) {
                result <- PainRatio(portfolio_bacon[1:i, ], Rf=rf)
                write.csv(result)
            }
        }
        ```
        """
        self.expected_rf = {
            0: [
            None, None, None,
            2.9662300712370400, 4.4639563315744200, 6.9533912648428800,
            8.5525691625527300, 15.127080824181200, 5.6995239278141000,
            7.3550027975430300, 5.9064682584701500, 8.6355710500115400,
            10.009243404789200, 3.8122309845695300, 1.1440393448276400,
            0.8351473403007020, 0.4100547525167660, 0.2491781707736400,
            0.3276524622550170, 0.4051939805814540, 0.2610350161067210,
            0.2698071401733870, 0.2417956028428860, 0.2115948629646200],
            0.02: [
            None, None, None,
            -5.0337699287638500, -5.5360436684266800, -5.0466087351584400,
            -5.4474308374488200, -0.8729191758205460, -1.8004760721853300,
            -0.9783305357896740, -1.6797386380812500, 0.35970898104638200,
            1.04372616341027000, -0.4301932578547540, -0.6854807299778340,
            -0.4711269768609430, -0.4967910700689740, -0.4341260368127550,
            -0.2964402614323120, -0.2267538740430900, -0.3206601172815830,
            -0.2891976154410740, -0.2948381896331460, -0.3010770717164500],
            0.04: [
            None, None, None,
            -13.033769928764700, -15.536043668427800, -17.046608735159800,
            -19.447430837450400, -16.872919175822300, -9.3004760721847700,
            -9.3116638691223800, -9.2659455346326500, -7.9161530879187800,
            -7.9217910779686600, -4.6726175002790400, -2.5150008047833000,
            -1.7774012940225900, -1.4036368926547100, -1.1174302443991500,
            -0.9205329851196410, -0.8587017286676350, -0.9023552506698870,
            -0.8482023710555350, -0.8314719821091770, -0.8137490063975190],
            0.06: [
            None, None, None,
            -21.03376992876560, -25.53604366842890, -29.04660873516110,
            -33.44743083745190, -32.87291917582410, -16.80047607218420,
            -17.64499720245510, -16.85215243118400, -16.19201515688390,
            -16.88730831934760, -8.915041742703320, -4.344520879588770,
            -3.083675611184240, -2.310482715240460, -1.800734451985550,
            -1.544625708806970, -1.490649583292180, -1.484050384058190,
            -1.407207126670000, -1.368105774585210, -1.326420941078590],
            0.08: [
            None, None, None,
            -29.03376992876650, -35.53604366843000, -41.04660873516240,
            -47.44743083745340, -48.87291917582580, -24.30047607218360,
            -25.97833053578780, -24.43835932773540, -24.46787722584910,
            -25.85282556072650, -13.15746598512760, -6.174040954394250,
            -4.389949928345880, -3.217328537826200, -2.484038659571940,
            -2.168718432494300, -2.122597437916720, -2.065745517446500,
            -1.966211882284460, -1.904739567061240, -1.839092875759660],
            0.1: [
            None, None, None,
            -37.03376992876740, -45.53604366843110, -53.04660873516370,
            -61.44743083745500, -64.87291917582760, -31.80047607218310,
            -34.31166386912050, -32.02456622428680, -32.74373929481430,
            -34.81834280210540, -17.39989022755190, -8.003561029199720,
            -5.696224245507530, -4.124174360411940, -3.167342867158340,
            -2.792811156181630, -2.754545292541270, -2.647440650834800,
            -2.525216637898920, -2.441373359537270, -2.351764810440730]
        }

    def test_conformance_to_R(self):
            for rf in self.expected_rf.keys():
                rf_annual = (1 + rf) ** 252 - 1
                ratios = Ratios(
                    periodicity=Periodicity.DAILY,
                    annual_risk_free_rate = rf_annual,
                    annual_target_return = 0.,
                    day_count_convention = DayCountConvention.RAW)
                ratios.reset()
                for i in range(bacon_portfolio_len):
                    ratios.add_return(
                        return_=bacon_portfolio_returns[i],
                        return_benchmark=bacon_benchmark_returns[i],
                        value=1.,
                        time_start=bacon_dates_previous[i],
                        time_end=bacon_dates[i])
                    expected = self.expected_rf[rf][i]
                    actual = ratios.pain_ratio()
                    if expected is None:
                        self.assertIsNone(actual)
                    else:
                        self.assertAlmostEqual(actual, expected, places=12)

class TestUlcerIndex(unittest.TestCase):
    def setUp(self):
        """
        Verify this implementation with expected outputs
        from the PerformanceAnalytics R package:
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/UlcerIndex.R

        The data were produced by the following script in the online R interpreter:
        https://www.datacamp.com/datalab/w/28c21593-21e6-47d9-8e72-acebdd3be32c/edit

        ```R
        if(!require('PerformanceAnalytics')) {
            install.packages('PerformanceAnalytics')
            library('PerformanceAnalytics')
        }
        data(portfolio_bacon)
        # head(portfolio_bacon, 100)
        # write.csv(portfolio_bacon)

        for (i in 1:portfolio_length) {
            result <- UlcerIndex(portfolio_bacon[1:i, ])
            write.csv(result)
        }
        ```
        """
        self.expected_values = [
            0.000000000000000000, 0.000000000000000000, 0.000000000000000000,
            0.004999999999999450, 0.004472135954999090, 0.004082482904638180,
            0.003779644730091860, 0.003535533905932350, 0.005734883511362320,
            0.005440588203494720, 0.005402019824271570, 0.005172040216394730,
            0.004969135507541710, 0.010987005311470400, 0.027434256917710300,
            0.033400616370435100, 0.045203959104378100, 0.056676085534212600,
            0.058286267631993700, 0.057065017555245000, 0.058983749023907400,
            0.059274727347882400, 0.059785256332054100, 0.060711532990550200]

    def test_conformance_to_R(self):
        ratios = Ratios(
            periodicity=Periodicity.DAILY,
            annual_risk_free_rate = 0.,
            annual_target_return = 0,
            day_count_convention = DayCountConvention.RAW)
        ratios.reset()
        for i in range(bacon_portfolio_len):
            ratios.add_return(
                return_=bacon_portfolio_returns[i],
                return_benchmark=bacon_benchmark_returns[i],
                value=1.,
                time_start=bacon_dates_previous[i],
                time_end=bacon_dates[i])
            expected = self.expected_values[i]
            actual = ratios.ulcer_index()
            if expected is None:
                self.assertIsNone(actual)
            else:
                self.assertAlmostEqual(actual, expected, places=13)

class TestMartinRatio(unittest.TestCase):
    def setUp(self):
        """
        Verify this implementation with expected outputs
        from the PerformanceAnalytics R package:
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/UlcerIndex.R
        https://github.com/braverock/PerformanceAnalytics/blob/master/R/MartinRatio.R

        The data were produced by the following script in the online R interpreter:
        https://www.datacamp.com/datalab/w/28c21593-21e6-47d9-8e72-acebdd3be32c/edit

        ```R
        if(!require('PerformanceAnalytics')) {
            install.packages('PerformanceAnalytics')
            library('PerformanceAnalytics')
        }
        data(portfolio_bacon)
        ################################################################
        # make yearly return dates from the monthly ones,
        # because R code annualizes the returns
        ################################################################
        dates <- as.Date(index(portfolio_bacon))
        #print(paste("dates",dates))

        # Generate a sequence of yearly dates starting from the first date in the dataset
        start_date <- dates[1]
        end_date <- dates[length(dates)]
        #print(paste("start=",start_date,"end=", end_date))
        yearly_dates <- seq.Date(from = start_date, by = "year", length.out = nrow(portfolio_bacon))

        # Ensure the number of yearly dates matches the number of rows in the dataset
        if (length(yearly_dates) > nrow(portfolio_bacon)) {
            yearly_dates <- yearly_dates[1:nrow(portfolio_bacon)]
        } else if (length(yearly_dates) < nrow(portfolio_bacon)) {
            stop("Not enough yearly dates to match the number of rows in the dataset.")
        }

        index(portfolio_bacon) <- yearly_dates
        #head(portfolio_bacon, 100)
        ###################################################################
        portfolio_length <- nrow(portfolio_bacon)

        for (rf in seq(0.0, 0.1, by=0.02)) {
            print(paste("Rf: ", rf))
            # first value (i=1) is always None because R code calculates periodicity
            for (i in 2:portfolio_length) {
                result <- MartinRatio(portfolio_bacon[1:i, ], Rf=rf)
                write.csv(result)
            }
        }
        ```
        """
        self.expected_rf = {
            0: [
            None, None, None,
            1.4831150356185200, 1.9963419611982000, 2.8387100967984600,
            3.2325672963992100, 5.3482307151677600, 2.6502247942890900,
            3.2445033613766200, 2.8825510906130700, 4.0350221249328900,
            4.4933997426306100, 1.6357456432054900, 0.4558695408843890,
            0.3828284707085000, 0.2000607604567100, 0.1286844429639630,
            0.1801474281465850, 0.2247200286966700, 0.1521601617470090,
            0.1628539762413560, 0.1507322845601700, 0.1359641377846650],
            0.02: [
            None, None, None,
            -2.5168849643819200, -2.4757939938018700, -2.0602693887684300,
            -2.0589353257305600, -0.3086235343252400, -0.8372043680251450,
            -0.4315697490920520, -0.8197677920646500, 0.16807616875056300,
            0.46855478325170200, -0.1845865977482860, -0.2731460129172140,
            -0.2159628742830620, -0.2423783620506580, -0.2241980790289680,
            -0.1629865691488930, -0.1257573891125490, -0.1869162844092630,
            -0.1745579511492220, -0.1837983543806040, -0.1934625627915340],
            0.04: [
            None, None, None,
            -6.5168849643823600, -6.9479299488019500, -6.9592488743353300,
            -7.3504379478603200, -5.9654777838182400, -4.3246335303393700,
            -4.1076428595607200, -4.5220866747423700, -3.6988697874317700,
            -3.5562901761272000, -2.0049188387020600, -1.0021615667188200,
            -0.8147542192746230, -0.6848174845580260, -0.5770806010218990,
            -0.5061205664443710, -0.4762348069217680, -0.5259927305655360,
            -0.5119698785398000, -0.5183289933213770, -0.5228892633677330],
            0.06: [
            None, None, None,
            -10.516884964382800, -11.420065903802000, -11.858228359902200,
            -12.641940569990100, -11.622332033311200, -7.8120626926536000,
            -7.7837159700294000, -8.2244055574200800, -7.5658157436141000,
            -7.5811351355061100, -3.8252510796558300, -1.7311771205204200,
            -1.4135455642661800, -1.1272566070653900, -0.9299631230148300,
            -0.8492545637398480, -0.8267122247309860, -0.8650691767218070,
            -0.8493818059303780, -0.8528596322621510, -0.8523159639439320],
            0.08: [
            None, None, None,
            -14.51688496438320, -15.89220185880210, -16.75720784546910,
            -17.93344319211980, -17.27918628280430, -11.29949185496780,
            -11.45978908049810, -11.92672444009780, -11.43276169979640,
            -11.60598009488500, -5.645583320609600, -2.460192674322020,
            -2.012336909257750, -1.569695729572760, -1.282845645007760,
            -1.192388561035330, -1.177189642540210, -1.204145622878080,
            -1.186793733320960, -1.187390271202920, -1.181742664520130],
            0.1: [
            None, None, None,
            -18.51688496438370, -20.36433781380220, -21.65618733103600,
            -23.22494581424960, -22.93604053229730, -14.78692101728210,
            -15.13586219096670, -15.62904332277550, -15.29970765597880,
            -15.63082505426390, -7.465915561563380, -3.189208228123630,
            -2.611128254249310, -2.012134852080130, -1.635728167000690,
            -1.535522558330800, -1.527667060349420, -1.543222069034350,
            -1.524205660711530, -1.521920910143700, -1.511169365096330]
        }

    def test_conformance_to_R(self):
            for rf in self.expected_rf.keys():
                rf_annual = (1 + rf) ** 252 - 1
                ratios = Ratios(
                    periodicity=Periodicity.DAILY,
                    annual_risk_free_rate = rf_annual,
                    annual_target_return = 0.,
                    day_count_convention = DayCountConvention.RAW)
                ratios.reset()
                for i in range(bacon_portfolio_len):
                    ratios.add_return(
                        return_=bacon_portfolio_returns[i],
                        return_benchmark=bacon_benchmark_returns[i],
                        value=1.,
                        time_start=bacon_dates_previous[i],
                        time_end=bacon_dates[i])
                    expected = self.expected_rf[rf][i]
                    actual = ratios.martin_ratio()
                    if expected is None:
                        self.assertIsNone(actual)
                    else:
                        self.assertAlmostEqual(actual, expected, places=12)

############################################

if __name__ == '__main__':
    unittest.main()